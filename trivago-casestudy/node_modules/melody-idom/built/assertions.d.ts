/**
 * Makes sure that there is a current patch context.
 * @param {*} context
 */
declare var assertInPatch: (functionName: any, context: any) => void;
/**
 * Makes sure that a patch closes every node that it opened.
 * @param {?Node} openElement
 * @param {!Node|!DocumentFragment} root
 */
declare var assertNoUnclosedTags: (openElement: any, root: any) => void;
/**
 * Makes sure that the caller is not where attributes are expected.
 * @param {string} functionName
 */
declare var assertNotInAttributes: (functionName: any) => void;
/**
 * Makes sure that the caller is not inside an element that has declared skip.
 * @param {string} functionName
 */
declare var assertNotInSkip: (functionName: any) => void;
/**
 * Makes sure that the caller is where attributes are expected.
 * @param {string} functionName
 */
declare var assertInAttributes: (functionName: any) => void;
/**
 * Makes sure the patch closes virtual attributes call
 */
declare var assertVirtualAttributesClosed: () => void;
/**
  * Makes sure that tags are correctly nested.
  * @param {string} nodeName
  * @param {string} tag
  */
declare var assertCloseMatchesOpenTag: (nodeName: any, tag: any) => void;
/**
 * Makes sure that no children elements have been declared yet in the current
 * element.
 * @param {string} functionName
 * @param {?Node} previousNode
 */
declare var assertNoChildrenDeclaredYet: (functionName: any, previousNode: any) => void;
/**
 * Checks that a call to patchOuter actually patched the element.
 * @param {?Node} node The node requested to be patched.
 * @param {?Node} previousNode The previousNode after the patch.
 */
declare var assertPatchElementNoExtras: (startNode: any, currentNode: any, expectedNextNode: any, expectedPrevNode: any) => void;
/**
 * Updates the state of being in an attribute declaration.
 * @param {boolean} value
 * @return {boolean} the previous value.
 */
declare var setInAttributes: (value: any) => boolean;
/**
 * Updates the state of being in a skip element.
 * @param {boolean} value
 * @return {boolean} the previous value.
 */
declare var setInSkip: (value: any) => boolean;
/** */
export { assertInPatch, assertNoUnclosedTags, assertNotInAttributes, assertInAttributes, assertCloseMatchesOpenTag, assertVirtualAttributesClosed, assertNoChildrenDeclaredYet, assertNotInSkip, assertPatchElementNoExtras, setInAttributes, setInSkip };
