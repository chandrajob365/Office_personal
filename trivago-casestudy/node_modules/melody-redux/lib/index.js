'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var melodyIdom = require('melody-idom');

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2017 trivago N.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var createWrapperComponent = function createWrapperComponent(Component) {
    return function () {
        function WrapperComponent() {
            _classCallCheck$1(this, WrapperComponent);

            this.refs = Object.create(null);
            this.props = null;
            this.childInstance = new Component();
            melodyIdom.link(this, this.childInstance);
        }

        _createClass(WrapperComponent, [{
            key: 'el',
            set: function set(el) {
                this.childInstance.el = el;
                return el;
            },
            get: function get() {
                return this.childInstance.el;
            }
        }]);

        return WrapperComponent;
    }();
};

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 trivago N.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var findNextStore = function findNextStore(comp) {
    for (var node = comp; node; node = melodyIdom.getParent(node)) {
        if (node.store) {
            return node.store;
        }
    }
    return null;
};

var defaultEmptyStateToPropsMapping = {};
var defaultMapStateToProps = function defaultMapStateToProps() {
    return defaultEmptyStateToPropsMapping;
};
var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
    return {
        dispatch: dispatch
    };
};
var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
    return Object.assign({}, parentProps, stateProps, dispatchProps);
};

function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
    var shouldSubscribeToStore = !!mapStateToProps;
    var doStatePropsDependOnOwnProps = shouldSubscribeToStore && mapStateToProps.length !== 1;
    var finalMapDispatchToProps = mapDispatchToProps || defaultMapDispatchToProps;
    if (mapDispatchToProps && typeof mapDispatchToProps !== 'function') {
        var dispatchMap = mapDispatchToProps;
        finalMapDispatchToProps = function finalMapDispatchToProps(dispatch) {
            return Object.keys(dispatchMap).reduce(function (acc, key) {
                acc[key] = function () {
                    return dispatch(dispatchMap[key].apply(dispatchMap, arguments));
                };
                return acc;
            }, {});
        };
    }
    var doDispatchPropsDependOnOwnProps = finalMapDispatchToProps.length !== 1;
    var finalMapStateToProps = mapStateToProps || defaultMapStateToProps;
    var finalMergeProps = mergeProps || defaultMergeProps;

    return function (Component) {
        return function (_createWrapperCompone) {
            _inherits(ConnectWrapperComponent, _createWrapperCompone);

            function ConnectWrapperComponent() {
                _classCallCheck(this, ConnectWrapperComponent);

                var _this = _possibleConstructorReturn(this, _createWrapperCompone.call(this));

                _this.store = null;
                _this.storeConnection = null;

                _this.renderProps = null;
                _this.ownProps = null;
                _this.stateProps = null;
                _this.dispatchProps = null;

                _this.mapStateToPropsFn = finalMapStateToProps;
                _this.mapDispatchToPropsFn = finalMapDispatchToProps;

                if (process.env.NODE_ENV !== 'production') {
                    _this.displayName = 'connect';
                }
                return _this;
            }

            ConnectWrapperComponent.prototype.apply = function apply(props) {
                if (shouldSubscribeToStore && !this.storeConnection) {
                    this.subscribeToStore();
                }
                if (shallowEquals(this.ownProps, props)) {
                    return;
                }
                var store = this.store || findNextStore(this);
                if (this.ownProps !== props || this.renderProps === null) {
                    this.ownProps = props;
                    if (doStatePropsDependOnOwnProps || !this.stateProps) {
                        this.stateProps = this.mapStateToProps(store.getState(), props);
                    }

                    if (doDispatchPropsDependOnOwnProps || !this.dispatchProps) {
                        this.dispatchProps = this.mapDispatchToProps(store.dispatch, props);
                    }

                    this.renderProps = finalMergeProps(this.stateProps, this.dispatchProps, props);
                }
                this.childInstance.apply(this.renderProps);
            };

            ConnectWrapperComponent.prototype.subscribeToStore = function subscribeToStore() {
                var _this2 = this;

                if (shouldSubscribeToStore && !this.storeConnection) {
                    if (!this.store) {
                        this.store = findNextStore(this);
                    }
                    this.storeConnection = this.store.subscribe(function () {
                        var props = _this2.ownProps;
                        var newStateProps = _this2.mapStateToProps(_this2.store.getState(), props);
                        if (newStateProps !== _this2.stateProps) {
                            var newRenderProps = finalMergeProps(newStateProps, _this2.dispatchProps, props);
                            _this2.stateProps = newStateProps;
                            var didRenderPropsChange = !shallowEquals(_this2.renderProps, newRenderProps);
                            _this2.renderProps = newRenderProps;
                            if (didRenderPropsChange) {
                                _this2.childInstance.apply(_this2.renderProps);
                            }
                        }
                    });
                }
            };

            ConnectWrapperComponent.prototype.mapStateToProps = function mapStateToProps(state, props) {
                var result = this.mapStateToPropsFn.call(null, state, props);
                if (typeof result === 'function') {
                    this.mapStateToPropsFn = result;
                    result = this.mapStateToPropsFn.call(null, state, props);
                }
                return result;
            };

            ConnectWrapperComponent.prototype.mapDispatchToProps = function mapDispatchToProps(dispatch, props) {
                var result = this.mapDispatchToPropsFn.call(null, dispatch, props);
                if (typeof result === 'function') {
                    this.mapDispatchToPropsFn = result;
                    result = this.mapDispatchToPropsFn.call(null, dispatch, props);
                }
                return result;
            };

            ConnectWrapperComponent.prototype.componentWillUnmount = function componentWillUnmount() {
                if (shouldSubscribeToStore) {
                    this.storeConnection();
                    this.storeConnection = null;
                    this.store = null;
                }
                this.mapStateToPropsFn = null;
                this.mapDispatchToPropsFn = null;
            };

            return ConnectWrapperComponent;
        }(createWrapperComponent(Component));
    };
}

function provide(store, Component) {
    return function (_createWrapperCompone2) {
        _inherits(StoreProviderComponent, _createWrapperCompone2);

        function StoreProviderComponent() {
            _classCallCheck(this, StoreProviderComponent);

            var _this3 = _possibleConstructorReturn(this, _createWrapperCompone2.call(this));

            _this3.store = store;

            if (process.env.NODE_ENV !== 'production') {
                _this3.displayName = 'provide';
            }
            return _this3;
        }

        StoreProviderComponent.prototype.apply = function apply(props) {
            if (!shallowEquals(props, this.props)) {
                this.childInstance.apply(props);
            }
        };

        StoreProviderComponent.prototype.componentWillUnmount = function componentWillUnmount() {};

        return StoreProviderComponent;
    }(createWrapperComponent(Component));
}

var hasOwn = Object.prototype.hasOwnProperty;

// based on react-redux
function shallowEquals(a, b) {
    if (a === b) {
        return true;
    }

    if (!a || !b) {
        return false;
    }

    var keyOfA = Object.keys(a),
        keysOfB = Object.keys(b);

    if (keyOfA.length !== keysOfB.length) {
        return false;
    }

    for (var i = 0; i < keyOfA.length; i++) {
        if (!hasOwn.call(b, keyOfA[i]) || a[keyOfA[i]] !== b[keyOfA[i]]) {
            return false;
        }
    }

    return true;
}

exports.connect = connect;
exports.provide = provide;
