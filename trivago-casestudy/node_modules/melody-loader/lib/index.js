'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _isObject = _interopDefault(require('lodash/isObject'));
var _isString = _interopDefault(require('lodash/isString'));
var melodyCompiler = require('melody-compiler');
var melodyExtensionCore = require('melody-extension-core');
var loaderUtils = require('loader-utils');

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Copyright 2017 trivago N.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
module.exports = function loader(content) {
    this.cacheable();

    var loaderOptions = loaderUtils.getOptions(this) || {
        plugins: []
    };
    // configuring logger using webpack logging mechanism.
    melodyExtensionCore.extension.options = {
        warn: this.emitWarning,
        error: this.emitError
    };
    var args = [this.resourcePath, content, melodyExtensionCore.extension];
    if (loaderOptions.plugins) {
        for (var _iterator = loaderOptions.plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var pluginName = _ref;

            if (_isString(pluginName)) {
                try {
                    args.push(require('melody-plugin-' + pluginName));
                } catch (e) {
                    this.emitWarning('Could not find plugin ' + pluginName + '. Expected name to be melody-plugin-' + pluginName);
                }
            } else if (_isObject(pluginName)) {
                args.push(pluginName);
            } else {
                this.emitWarning('Value passed as Melody plugin must be string or object. ' + pluginName + ' of type ' + (typeof pluginName === 'undefined' ? 'undefined' : _typeof(pluginName)) + ' was given');
            }
        }
    }

    try {
        var result = melodyCompiler.toString(melodyCompiler.compile.apply(null, args), content);
        return result.code;
    } catch (e) {
        this.emitError(e);
        return 'import {text} from "melody-idom"; export default { render(options) { text("Could not load ' + this.resourcePath + '"); console.error("Could not load ' + this.resourcePath + '", ' + JSON.stringify(e.message) + '); } };';
    }
};
